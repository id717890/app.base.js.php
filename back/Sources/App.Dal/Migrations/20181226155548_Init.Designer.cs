// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Raffle.Dal;

namespace Raffle.Dal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181226155548_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1a9c5933-230d-4cc4-a411-c679f92fc51b", ConcurrencyStamp = "a8ca2929-26f6-415f-a1d3-666e514a92d7", Name = "Superuser", NormalizedName = "SUPERUSER" },
                        new { Id = "abf44858-2ab6-4e53-b04e-5ebd3f91b47c", ConcurrencyStamp = "e14d2e11-ce26-402e-a82d-c5bb76528cd3", Name = "Participant", NormalizedName = "PARTICIPANT" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Gender");

                    b.Property<string>("IdentityId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Locale");

                    b.Property<string>("Location");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.Gift", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescriptionFull")
                        .IsRequired();

                    b.Property<string>("DescriptionShort");

                    b.Property<string>("Image");

                    b.Property<string>("ImageLocal");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Gifts");

                    b.HasData(
                        new { Id = 1L, DescriptionFull = "Смартфон Apple iPhone X – воплощение статуса, надежности и передовых технологий. Большой, 5.8-дюймовый безрамочный экран дарит удивительно четкое и живое изображение (разрешение 2436x1125). Привычный поклонникам бренда интерфейс здесь дополнен такими возможностями, как бесконтактная оплата и зарядка, поддержка максимального количества диапазонов LTE.", Image = "https://www.re-store.ru/upload/iblock/ea3/ea3a57da3137cf5be1c0b3d1e8999a37.jpg", IsDeleted = false, Name = "Apple iPhone X 64 ГБ" },
                        new { Id = 2L, DescriptionFull = "Смартфон Samsung Galaxy Note 8 64 ГБ – устройство, в котором внимание уделялось всем деталям. Выполнена задняя панель в синем цвете, она придает лаконичный дизайн. Устанавливается стекло Corning Gorilla Glass 5 с двух сторон. Оно не царапается при эксплуатации и обладает увеличенной прочностью. Samsung Galaxy Note 8 64 ГБ поддерживает установку 2 SIM - карт.Если вы используете номера различных операторов, то сможете совместить их в одном устройстве.Экран получил большой размер, диагональ составляет 6.3 дюйма.Но рамки незначительные, особое соотношение сторон 18:9 улучшает взаимодействие со смартфоном.", Image = "https://cdn.images.express.co.uk/img/dynamic/galleries/x701/260002.jpg", IsDeleted = false, Name = "Samsung Galaxy Note 8 64 ГБ" },
                        new { Id = 3L, DescriptionFull = "Игровая приставка PlayStation 4 Pro в полной мере оправдывает свое название. В приставке есть все необходимое для комфортного использования любимых игр. Модель использует игровые носители Blu-ray. Также есть поддержка DVD и CD. Приставка поддерживает форматы Full HD и Ultra HD (4K), а также технологию 3D. Вам останется лишь подключить устройство к функциональному телевизионному приемнику. Комплектный геймпад оборудован сенсорной панелью. Приставка PlayStation 4 Pro обладает безупречным быстродействием, которое обеспечивается 2.1 - гигагерцовым процессором AMD Jaguar x86 - 64, 8 ГБ оперативной памяти и графическое ядро AMD Radeon GPU.Объем встроенной памяти достаточен для размещения очень большого количества данных: он равен 1 ТБ.Беспроводные интерфейсы устройства представлены Wi - Fi и Bluetooth.", Image = "https://brain-images-ssl.cdn.dixons.com/1/7/10153771/l_10153771_001.jpg", IsDeleted = false, Name = "PlayStation 4 Pro" },
                        new { Id = 4L, DescriptionFull = "Игровая приставка Microsoft Xbox ONE X совместима с играми, разработанными для платформ Xbox 360 и Xbox One. Модель рассчитана на игровые носители Blu-ray. Поддерживаются и носители CD и DVD. Приставка комплектуется беспроводным геймпадом, который отличается значительным радиусом действия. Для вывода изображения используется выход HDMI.", Image = "https://static.eldorado.ru/photos/71/713/662/67/new_71366267_l_1507895560.jpeg/resize/500x375/", IsDeleted = false, Name = "Microsoft Xbox One X" },
                        new { Id = 5L, DescriptionFull = "Смартфон Apple iPhone 7 выполнен в герметичном черном алюминиевом корпусе, защищающем его от брызг, царапин и пыли. При этом смартфон еще и очень тонкий, его габариты: 67.1x138.3x 7.1 миллиметра. У Apple iPhone 7 отличная фронтальная камера в 7 Мп. Это позволяет получать еще более качественные фотографии с отличной степенью резкости, делать великолепного качества панорамные кадры, а также дает широкие возможности при видеосъемке. Снимайте видео в формате Ultra HD 4K, а также ведите замедленную съемку в формате 1080p и 720p.Шестилинзовый объектив и вспышка True Tone Quad - LED гарантируют отличную освещенность и хорошие кадры даже ночью.Мощный 4 - ядерный процессор обеспечит отличное быстродействие системы, легкую загрузку и работу с файлами и приложениями любого объема.Вы можете не ограничивать себя в скачивании информации, видео и снимать столько, сколько вам захочется, 128 ГБ встроенной памяти хватит на все.", Image = "https://www.re-store.ru/upload/iblock/fe9/fe9918ce97219b07de7ac1a088e6b3c1.jpg", IsDeleted = false, Name = "Apple iPhone 7 128 Гб" },
                        new { Id = 6L, DescriptionFull = "Телевизор LED LG 43UK6200 поддерживает цифровые тюнеры DVB-T, DVB-T2, DVB-C, DVB-S и DVB-S2.", ImageLocal = "LED LG 43UK6200 2.jpg", IsDeleted = false, Name = "Телевизор LED LG 43UK6200" },
                        new { Id = 7L, DescriptionFull = "Микроволновая печь LG MH6336GIB выполнена в стильном матовом корпусе черного цвета.", ImageLocal = "LG MH6336GIB.jpg", IsDeleted = false, Name = "Микроволновая печь LG MH6336GIB" },
                        new { Id = 8L, DescriptionFull = "9.7-дюймовый планшет Samsung GALAXY Tab S2 оснащен внушительным запасом встроенной памяти 32 ГБ и беспроводной технологией доступа к мобильной интернет-сети 3G.", ImageLocal = "Samsung GALAXY Tab S2 32 ГБ 3G, LTE черный.jpg", IsDeleted = false, Name = "Планшет Samsung GALAXY Tab S2 9.7" },
                        new { Id = 9L, DescriptionFull = "Стиральная машина Samsung WW60H2200EWD/LP – модель от компании, которая давно занимается выпуском данной техники.", ImageLocal = "washmachine Samsung WW60H2200EWDLP.jpg", IsDeleted = false, Name = "Стиральная машина Samsung WW60H2200EWD/LP" },
                        new { Id = 10L, DescriptionFull = "Пылесос Thomas DryBOX AMFIBIA выполнен в корпусе черного цвета с голубыми деталями.", ImageLocal = "Thomas DryBOX AMFIBIA.jpg", IsDeleted = false, Name = "Пылесос Thomas DryBOX AMFIBIA" },
                        new { Id = 11L, DescriptionFull = "Смартфон Samsung Galaxy A8+ SM-A730F сможет поразить своим обширным функционалом и грандиозным техническим оснащением даже самого требовательного и капризного пользователя.", ImageLocal = "Samsung Galaxy A8+ SM-A730F 32 ГБ черный.jpg", IsDeleted = false, Name = "Смартфон Samsung Galaxy A8+ SM-A730F" },
                        new { Id = 12L, DescriptionFull = "Фитнес-браслет Xiaomi Mi Band 3 - миниатюрное устройство для пользователя, который ведет активный образ жизни. Представленная техника позволит вам отслеживать ваш пульс, количество пройденных шагов, потраченные калории и пройденное расстояние. Модель стала обладательницей универсальным черным корпусом и ремешком. Поддерживается совместимость с операционными платформами Android версии 4.4 и выше, а также iOS версии 9 и выше. Настройка параметров работы и управление браслетом осуществляется со смартфона.", Image = "https://i5.stat01.com/2/59/100583661/075a3e/remeshok-dlya-fitnes-brasleta-xiaomi-mi-band-2-chernyj.png", IsDeleted = false, Name = "Фитнес-браслет Xiaomi Mi Band 3" },
                        new { Id = 13L, DescriptionFull = "Стильный и ультратонкий LED-телевизор LG 32LJ500V представлен в черной расцветке. Прямой экран Direct LED обладает диагональю 32 дюйма и разрешение 1920x1080 при формате 16:9. Используется матрица с качеством изображения 200 PMI и частотой обновления 50 Гц. Предусматривается наличие двух HDMI-портов, трех аудиовходов и одного USB-порта. Допускается надежное крепление на стену при помощи кронштейна 100x100.", Image = "https://avatars.mds.yandex.net/get-mpic/200316/img_id4405617333422780220/9hq", IsDeleted = false, Name = "Телевизор LED LG 32LJ500V (81 см)" }
                    );
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.GiftDraw", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GiftId");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("PriceKey");

                    b.Property<string>("WinnerKey");

                    b.HasKey("Id");

                    b.HasIndex("GiftId");

                    b.ToTable("GiftDraws");

                    b.HasData(
                        new { Id = 1L, GiftId = 12L, IsDeleted = false, Price = 6m, PriceKey = 2m },
                        new { Id = 2L, GiftId = 13L, IsDeleted = false, Price = 10m, PriceKey = 2m },
                        new { Id = 3L, GiftId = 1L, IsDeleted = false, Price = 10m, PriceKey = 2m },
                        new { Id = 4L, GiftId = 2L, IsDeleted = false, Price = 10m, PriceKey = 2m },
                        new { Id = 5L, GiftId = 3L, IsDeleted = false, Price = 12m, PriceKey = 2m },
                        new { Id = 6L, GiftId = 4L, IsDeleted = false, Price = 12m, PriceKey = 2m },
                        new { Id = 7L, GiftId = 5L, IsDeleted = false, Price = 8m, PriceKey = 2m }
                    );
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.GiftDrawUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GiftDrawId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GiftDrawId");

                    b.HasIndex("UserId");

                    b.ToTable("GiftDrawUsers");
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.GiftDrawUserKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GiftDrawUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Key")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("GiftDrawUserId");

                    b.ToTable("GiftDrawUserKeys");
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount");

                    b.Property<string>("Codepro");

                    b.Property<string>("Currency");

                    b.Property<string>("Date");

                    b.Property<string>("Errors");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Label");

                    b.Property<string>("NotificationType");

                    b.Property<string>("OperationId");

                    b.Property<string>("Sender");

                    b.Property<string>("Sha1Hash");

                    b.Property<string>("Sha1HashServer");

                    b.Property<string>("Unaccepted");

                    b.Property<string>("WithdrawAmount");

                    b.Property<string>("YandexString");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.Vote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GiftId");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("GiftId");

                    b.ToTable("Votes");

                    b.HasData(
                        new { Id = 1L, GiftId = 6L, IsDeleted = false, Price = 29999m },
                        new { Id = 2L, GiftId = 7L, IsDeleted = false, Price = 9999m },
                        new { Id = 3L, GiftId = 8L, IsDeleted = false, Price = 29499m },
                        new { Id = 4L, GiftId = 9L, IsDeleted = false, Price = 24499m },
                        new { Id = 5L, GiftId = 10L, IsDeleted = false, Price = 24999m },
                        new { Id = 6L, GiftId = 11L, IsDeleted = false, Price = 22999m }
                    );
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.VoteUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("UserId");

                    b.Property<bool>("Value");

                    b.Property<long>("VoteId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoteId");

                    b.ToTable("VoteUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Raffle.Domain.Interface.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Raffle.Domain.Interface.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Raffle.Domain.Interface.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Raffle.Domain.Interface.Entity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.Customer", b =>
                {
                    b.HasOne("Raffle.Domain.Interface.Entity.ApplicationUser", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId");
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.GiftDraw", b =>
                {
                    b.HasOne("Raffle.Domain.Interface.Entity.Gift", "Gift")
                        .WithMany("GiftDraws")
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.GiftDrawUser", b =>
                {
                    b.HasOne("Raffle.Domain.Interface.Entity.GiftDraw", "GiftDraw")
                        .WithMany()
                        .HasForeignKey("GiftDrawId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Raffle.Domain.Interface.Entity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.GiftDrawUserKey", b =>
                {
                    b.HasOne("Raffle.Domain.Interface.Entity.GiftDrawUser", "GiftDrawUser")
                        .WithMany("Keys")
                        .HasForeignKey("GiftDrawUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.Vote", b =>
                {
                    b.HasOne("Raffle.Domain.Interface.Entity.Gift", "Gift")
                        .WithMany()
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Raffle.Domain.Interface.Entity.VoteUser", b =>
                {
                    b.HasOne("Raffle.Domain.Interface.Entity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Raffle.Domain.Interface.Entity.Vote", "Vote")
                        .WithMany("VoteUsers")
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
